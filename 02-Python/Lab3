2.1
# sql_fact_orders = **
# Create the table that joins dataframes
# df_fact_order_head(2)    I think this is right for the end
sql_fact_orders = """
SELECT o.id,
o.employee_id,
    o.customer_id,
    od.product_id,
    o.shipper_id,
    o.ship_name,
    o.ship_address,
    o.ship_city,
    o.ship_state_province,
    o.ship_zip_postal_code,
    o.ship_country_region,
    od.quantity,
    o.order_date,
    o.shipped_date,
    od.unit_price,
    od.discount,
    o.shipping_fee,
    o.taxes,
    o.payment_type,
    o.paid_date,
    o.tax_rate,
    os.status_name AS order_status,
    ods.status_name AS order_details_status
FROM northwind.orders AS o
INNER JOIN northwind.orders_status AS os
ON o.status_id = os.id
RIGHT OUTER JOIN northwind.order_details AS od_status
ON o.id = od.order_id
INNER JOIN northwind.order_details_status AS ods
ON od.status_id = ods.id;
"""

# Copied from up there
df_fact_orders = get_dataframe(user_id, pwd, host_name, src_dbname, sql_fact_orders)
df_fact_orders.head(2)

2.2
2.2.1
# Use 1.1 as a guide
sql_orders = "SELECT * FROM northwind.orders;"
df_orders = get_dataframe(user_id, pwd, host_name, src_dbname, sql_orders)
df_orders.rename(columns={"id":"order_id"}, inplace=True)
df_orders.head(2)

sql_orders_status = "SELECT * FROM northwind.orders_status;"
df_orders_status = get_dataframe(user_id, pwd, host_name, src_dbname, sql_orders_status)
df_orders_status.rename(columns={"id":"status_id"}, inplace=True)
df_orders_status.head(2)

sql_order_details = "SELECT * FROM northwind.order_details;"
df_order_details = get_dataframe(user_id, pwd, host_name, src_dbname, sql_order_details)
df_order_details.head(2)

sql_order_details_status = "SELECT * FROM northwind.order_details_status;"
df_order_details_status = get_dataframe(user_id, pwd, host_name, src_dbname, sql_order_details_status)
df_order_details_status.rename(columns={"id":"status_id"}, inplace=True)
df_order_details_status.head(2)

2.2.2
df_orders = pd.merge(df_orders, df_orders_status, on='status_id', how='inner') # Merge & Inner Join
df_orders.rename(columns={"status_name":"order_status"}, inplace=True) # Rename
df_orders.drop(['status_id'], axis=1, inplace=True) # Drop
df_orders.head(2) # Head thing

2.2.3
# Same as previous question but replace orders with order_details and
df_order_details = pd.merge(df_order_details, df_order_details_status, on='status_id', how='inner') # Merge and Inner Join
df_order_details.rename(columns={"status_name":"order_details_status"}, inplace=True) # Rename
df_order_details.drop(['status_id'], axis=1, inplace=True) # Drop
df_order_details.head(2) # Head thing

2.2.4
df_fact_orders = pd.merge(df_orders, df_order_details, on='order_id', how='right') # Using a right join 
df_fact_orders.head(2)

2.2.5
# Drop columns of no interest to me
drop_columns = ['id','notes','tax_status_id','purchase_order_id','inventory_id','data_allocated']
df_fact_orders.drop(drop_columns, axis=1, inpace=True)

# Reorder columns
reorder_columns = ['order_id','employee_id','customer_id','product_id','shipper_id',
                 'ship_name','ship_address','ship_city','ship_state_province',
                 'ship_zip_postal_code','ship_country','quantity','order_date',
                 'shipped_date','unit_price','discount','shipping_fee','taxes',
                 'payment_type','paid_date','order_status','order_details_status']
df_fact_orders = df_fact_orders[reorder_columns]

# Insert a new column with an ever-increasing numeric value to be the primary key
df_fact_orders.insert(0, "order_key", range(1, df_fact_orders.shape[0]+1))
df_fact_orders.head(2)

2.2.6
table_name = "fact_orders"
primary_key = "order_key"
db_operation = "insert"
set_dataframe(user_id, pwd, host_name, dst_dbname, df_fact_orders, table_name, primary_key, db_operation)

3.0
sql_test = """
    SELECT customers.`last_name` AS `customer_name`,
        SUM(orders.`quantity`) AS `total_quantity`,
        SUM(orders.`unit_price`) AS `total_unit_price`
    FROM `{0}`.`fact_orders` AS orders
    INNER JOIN `{0}`.`dim_customers` AS customers
    ON orders.customer_id = customers.customer_key
    GROUP BY customers.`last_name`
    ORDER BY total_unit_price DESC;
""".format(dst_dbname)

df_test = get_dataframe(user_id, pwd, host_name, src_dbname, sql_test)

df_test.head() 
